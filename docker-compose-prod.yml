services:
  npm_cache:
    build:
      context: ./
      dockerfile: npm_cache/Dockerfile
    image: npm_cache
  control_center:
    build:
      context: control_center
      dockerfile: Dockerfile
      target: prod
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    networks:
      - internal
    depends_on:
      - npm_cache
    restart: unless-stopped
  rss_fetch:
    build:
      context: workers/rss_fetch
      dockerfile: Dockerfile
      target: prod
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    networks:
      - internal
    depends_on:
      - npm_cache
    restart: unless-stopped
  analysis:
    build:
      context: workers/analysis
      dockerfile: Dockerfile
      target: prod
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    networks:
      - internal
    depends_on:
      - npm_cache
    restart: unless-stopped
  link_writer:
    build:
      context: workers/link_writer
      dockerfile: Dockerfile
      target: prod
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    networks:
      - internal
    depends_on:
      - npm_cache
    restart: unless-stopped
  err_log_writer:
    build:
      context: workers/err_log_writer
      dockerfile: Dockerfile
      target: prod
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    networks:
      - internal
    depends_on:
      - npm_cache
    restart: unless-stopped
  link_fix_detector:
    build:
      context: workers/link_fix_detector
      dockerfile: Dockerfile
      target: prod
    environment:
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    networks:
      - internal
    depends_on:
      - npm_cache
    restart: unless-stopped
  redis-0:
   build:
     context: infrastructure/redis
     dockerfile: Dockerfile
     target: base
   networks:
     - internal
   restart: unless-stopped
   ports:
     - 127.0.0.1:6379:6379
  redis-1:
    build:
      context: infrastructure/redis
      dockerfile: Dockerfile
      target: slave
    networks:
      - internal
    restart: unless-stopped
    ports:
      - 6379
  redis-2:
    build:
      context: infrastructure/redis
      dockerfile: Dockerfile
      target: slave
    networks:
      - internal
    restart: unless-stopped
    ports:
      - 6379
  redis-sentinel-0:
    build: infrastructure/redis-sentinel
    networks:
      - internal
    ports:
      - 26379
    depends_on:
      - redis-0
    restart: unless-stopped
  redis-sentinel-1:
    build: infrastructure/redis-sentinel
    networks:
      - internal
    ports:
      - 26379
    depends_on:
      - redis-1
    restart: unless-stopped
  redis-sentinel-2:
    build: infrastructure/redis-sentinel
    networks:
      - internal
    ports:
      - 26379
    depends_on:
      - redis-2
    restart: unless-stopped
  postgres:
    image: "postgres:15.3-alpine"
    networks:
      - internal
    container_name: db_server
    hostname: db_server
    ports:
      - 127.0.0.1:5432:5432
    restart: unless-stopped
    volumes:
      - ./infrastructure/datadir/pgdata:/var/lib/postgresql/pgdata
      - ./infrastructure/postgre/sql:/docker-entrypoint-initdb.d
      - ./infrastructure/postgre/credentials:/credentials
    environment:
      POSTGRES_DB_FILE: /credentials/db_name
      POSTGRES_USER_FILE: /credentials/db_user
      POSTGRES_PASSWORD_FILE: /credentials/db_password
      POSTGRES_EXTENSIONS: pg_trgm, plpgsql, unaccent
      PGDATA: /var/lib/postgresql/pgdata
  kafka-0:
    image: "docker.io/bitnami/kafka:3.5.1-debian-11-r7"
    networks:
      - internal
    ports:
      - 127.0.0.1:9092:9092
      - 127.0.0.1:9093:9093
    mem_limit: "1GB"
    restart: unless-stopped
    environment:
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./infrastructure/datadir/kafka_0_data:/bitnami/kafka
  kafka-1:
    image: "docker.io/bitnami/kafka:3.5.1-debian-11-r7"
    networks:
      - internal
    ports:
      - 9092
      - 9093
    mem_limit: "1GB"
    restart: unless-stopped
    environment:
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./infrastructure/datadir/kafka_1_data:/bitnami/kafka
  kafka-2:
    image: "docker.io/bitnami/kafka:3.5.1-debian-11-r7"
    networks:
      - internal
    ports:
      - 9092
      - 9093
    mem_limit: "1GB"
    restart: unless-stopped
    environment:
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_NODE_ID=2
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - ./infrastructure/datadir/kafka_2_data:/bitnami/kafka
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_STACK_VERSION}
    volumes:
      - ./infrastructure/datadir/elastic/esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    networks:
      - internal
    environment:
      - node.name=es01
      - cluster.name=${ES_CLUSTER_NAME}
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - cluster.routing.allocation.disk.threshold_enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_STACK_VERSION}
    volumes:
      - ./infrastructure/datadir/elastic/esdata02:/usr/share/elasticsearch/data
    networks:
      - internal
    ports:
      - ${ES_PORT2}:9200
    environment:
      - node.name=es02
      - cluster.name=${ES_CLUSTER_NAME}
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - cluster.routing.allocation.disk.threshold_enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_STACK_VERSION}
    volumes:
      - ./infrastructure/datadir/elastic/esdata03:/usr/share/elasticsearch/data
    networks:
      - internal
    ports:
      - ${ES_PORT3}:9200
    environment:
      - node.name=es03
      - cluster.name=${ES_CLUSTER_NAME}
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - cluster.routing.allocation.disk.threshold_enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
  jaeger:
    image: "jaegertracing/all-in-one"
    networks:
      - internal
    container_name: trace_logger
    hostname: trace_logger
    ports:
      - 16686:16686
      - 14268:14268
      #- 9411:9411
      - 5778:5778
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
    environment:
      SPAN_STORAGE_TYPE: elasticsearch
      COLLECTOR_OTLP_ENABLED: true
      ES_SERVER_URLS: http://es01:${ES_PORT},http://es02:${ES_PORT2},http://es03:${ES_PORT3}
      #REPORTER_GRPC_HOST_PORT: trace_logger:14250
    restart: unless-stopped
#  jaeger_collector:
#    #image: "jaegertracing/all-in-one"
#    image: "jaegertracing/jaeger-collector:1.48"
#    networks:
#      - internal
#    container_name: trace_logger
#    hostname: trace_logger
#    environment:
#      SPAN_STORAGE_TYPE: elasticsearch
#      COLLECTOR_OTLP_ENABLED: true
#      ES_SERVER_URLS: http://es01:${ES_PORT},http://es02:${ES_PORT2},http://es03:${ES_PORT3}
#    ports:
#      - 14269:14269
#      - 14268:14268
#      - 14267:14267
#      - 14250:14250
#      - 9411:9411
#    restart: unless-stopped
#  jaeger_agent:
#    image: "jaegertracing/jaeger-agent:1.48"
#    networks:
#      - internal
#    environment:
#      SPAN_STORAGE_TYPE: elasticsearch
#      ES_SERVER_URLS: http://es01:${ES_PORT},http://es02:${ES_PORT2},http://es03:${ES_PORT3}
#      REPORTER_GRPC_HOST_PORT: trace_logger:14250
#    ports:
#      - 5775:5775/udp
#      - 6831:6831/udp
#      - 6832:6832/udp
#      - 5778:5778
#    restart: unless-stopped
#  jaeger_ui:
#    image: "jaegertracing/jaeger-query:1.48"
#    networks:
#      - internal
#    environment:
#      SPAN_STORAGE_TYPE: elasticsearch
#      ES_SERVER_URLS: http://es01:${ES_PORT},http://es02:${ES_PORT2},http://es03:${ES_PORT3}
#    ports:
#      - 16685:16685
#      - 16686:16686
#      - 16687:16687
#    restart: unless-stopped
  kafka_ui:
    image: "provectuslabs/kafka-ui:latest"
    networks:
      - internal
    ports:
      - 127.0.0.1:8081:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    restart: unless-stopped
    volumes:
      - ./infrastructure/kafka-ui/config-prod.yml:/etc/kafkaui/dynamic_config.yaml
networks:
  internal:
    name: internal