generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_DB_CONNECTION_URI")
}

model err_log {
  id         BigInt  @id @default(autoincrement())
  service_id String  @db.VarChar(50)
  code       Int     @default(0)
  log_time   Int     @default(0)
  msg        String
  extra      String? @default("")

  @@index([code], map: "code")
  @@index([service_id, log_time], map: "service_id_log_time")
}

model feeds {
  id                                BigInt  @id @default(autoincrement())
  url                               String  @unique @db.VarChar(500)
  title                             String? @default("") @db.VarChar(500)
  article_selector                  String? @default("") @db.VarChar(500)
  icon                              String  @default("") @db.VarChar(500)
  fetch_interval_minutes            Int     @default(5) @db.SmallInt
  last_fetch_ts                     Int     @default(0)
  last_non_empty_fetch              Int     @default(0)
  next_fetch_ts                     Int     @default(0)
  last_error                        String? @default("")
  last_error_ts                     Int     @default(0)
  empty_fetches                     Int     @default(0)
  subsequent_stable_fetch_intervals Int     @default(0)
  subsequent_errors_counter         Int     @default(0)
  total_fetches                     Int     @default(0)
  total_errors                      Int     @default(0)
  subscribers                       Json    @default("{}")
  stories_per_day                   String  @default("{}")
  stories_per_hour                  String  @default("{}")
  stories_per_month                 String  @default("{}")
  active                            Int     @default(1) @db.SmallInt

  @@index([subsequent_errors_counter(sort: Desc), last_error_ts], map: "errors_check")
  @@index([next_fetch_ts], map: "next_fetch_ts")
  @@index([active, next_fetch_ts, subsequent_errors_counter(sort: Desc), subscribers], map: "rss_fetch_conditions")
}

model langs {
  id          BigInt  @id @default(autoincrement())
  lang_name   String? @default("") @db.VarChar(50)
  lang_2_code String? @default("") @db.VarChar(2)
  lang_3_code String? @default("") @db.VarChar(3)
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
model links {
  id             BigInt  @default(autoincrement())
  feed_id        BigInt
  title          String? @default("") @db.VarChar(750)
  description    String? @default("")
  original_body  String? @default("")
  link           String  @db.VarChar(750)
  img            String? @default("") @db.VarChar(500)
  lang           Int     @default(0)
  date_posted    Int     @default(0)
  date_fetched   Int     @default(dbgenerated("round(EXTRACT(epoch FROM now()))"))
  date_processed Int     @default(0)
  is_processed   Int     @default(0) @db.SmallInt

  @@id([id, feed_id, date_fetched])
  @@index([feed_id, link], map: "feed_link")
  @@index([feed_id, is_processed], map: "feed_processed")
  @@index([is_processed(sort: Desc), date_fetched(sort: Desc)], map: "processed_fetched")
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
model links_181 {
  id             BigInt
  feed_id        BigInt
  title          String? @default("") @db.VarChar(750)
  description    String? @default("")
  original_body  String? @default("")
  link           String  @db.VarChar(750)
  img            String? @default("") @db.VarChar(500)
  lang           Int     @default(0)
  date_posted    Int     @default(0)
  date_fetched   Int     @default(dbgenerated("round(EXTRACT(epoch FROM now()))"))
  date_processed Int     @default(0)
  is_processed   Int     @default(0) @db.SmallInt

  @@id([id, feed_id, date_fetched])
  @@index([feed_id, is_processed])
  @@index([feed_id, link])
  @@index([is_processed(sort: Desc), date_fetched(sort: Desc)])
}

view fetchable_feeds {
  url String @db.VarChar(500) @unique
}
